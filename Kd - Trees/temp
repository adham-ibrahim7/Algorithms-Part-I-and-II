//add the point to the set (effectively doing nothing if the point is already in the set)
	public void insert(Point2D p) {
		size++;
		
		if (root == null) {
			root = new TreeNode(p, new RectHV(0, 0, 1, 1));
			return;
		}
		
		TreeNode node = root;
		
		int depth = 0;
		
		while (true) {
			double pField, nodeField;
			if (depth % 2 == 0) {
				pField = p.x();
				nodeField = node.point.x();
			} else {
				pField = p.y();
				nodeField = node.point.y();
			}
			
			if (pField < nodeField) {
				if (node.left == null) {
					node.left = new TreeNode(p);
					return;
				}
				node = node.left;
			} else {
				if (node.right == null) {
					node.right = new TreeNode(p);
					return;
				}
				node = node.right;
			}
			
			depth++;
		}
	}
	
	//does the set contain the point p?
	public boolean contains(Point2D p) {
		return false;
	}
	
	//recursive helper function to draw the kdtree
	private void draw(TreeNode node, int depth, double minX, double maxX, double minY, double maxY) {
		if (node == null) return;
		
		double field;
		StdDraw.setPenRadius(0.004);
		if (depth % 2 == 0) {
			field = node.point.x();
			StdDraw.setPenColor(StdDraw.RED);
			StdDraw.line(field, minY, field, maxY);
			draw(node.left, depth + 1, minX, field, minY, maxY);
			draw(node.right, depth + 1, field, maxX, minY, maxY);
		} else {
			field = node.point.y();
			StdDraw.setPenColor(StdDraw.BLUE);
			StdDraw.line(minX, field, maxX, field);
			draw(node.left, depth + 1, minX, maxX, minY, field);
			draw(node.right, depth + 1, minX, maxX, field, maxY);
		}
		
		StdDraw.setPenRadius(0.010);
		StdDraw.setPenColor(StdDraw.BLACK);
		node.point.draw();
	}
	
	//draws all points to standard draw
	public void draw() {
		draw(root, 0, 0.0, 1.0, 0.0, 1.0);
	}